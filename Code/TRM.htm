<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\TRM.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\TRM.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Wed Feb 15 18:31:29 2017
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; NRF24L01_Init &rArr; NRF24L01_Set_RX_Pipe &rArr; NRF24L01_WriteRegBuf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[24]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[17]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[17]">ADC_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[19]">BOD_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[c]">CAN_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1a]">FMC_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[e]">I2C_IRQHandler</a> from i2c.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1e]">PIOINT0_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1d]">PIOINT1_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1c]">PIOINT2_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1b]">PIOINT3_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[22]">Reset_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[13]">SSP0_IRQHandler</a> from ssp.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[d]">SSP1_IRQHandler</a> from ssp.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_lpc11xx.o(.text) referenced from startup_lpc11xx.o(.text)
 <LI><a href="#[f]">TIMER16_0_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[10]">TIMER16_1_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[11]">TIMER32_0_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[12]">TIMER32_1_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[14]">UART_IRQHandler</a> from uart.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[16]">USB_FIQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[15]">USB_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[b]">WAKEUP_IRQHandler</a> from startup_lpc11xx.o(.text) referenced 13 times from startup_lpc11xx.o(RESET)
 <LI><a href="#[18]">WDT_IRQHandler</a> from startup_lpc11xx.o(.text) referenced from startup_lpc11xx.o(RESET)
 <LI><a href="#[23]">__main</a> from __main.o(!!!main) referenced from startup_lpc11xx.o(.text)
 <LI><a href="#[21]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[23]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[25]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[27]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a0]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[a1]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[28]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[a2]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[2f]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[a3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[a4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[29]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[a5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[a6]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[a7]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[a8]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2b]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[a9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[aa]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ab]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[ac]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[ad]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ae]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[af]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[b0]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[b1]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[b2]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[b3]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[b4]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[b5]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[b6]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[b7]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[34]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[b8]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[b9]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[ba]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[bb]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[bc]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[bd]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[be]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[26]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[bf]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[2c]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2e]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[c0]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[30]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; NRF24L01_Init &rArr; NRF24L01_Set_RX_Pipe &rArr; NRF24L01_WriteRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[9e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[33]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[c2]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[35]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[22]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>PIOINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>PIOINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PIOINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>PIOINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TIMER16_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TIMER16_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIMER32_0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER32_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>USB_FIQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>WAKEUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc11xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[37]"></a>Delay_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, cpu_lpc1000.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>

<P><STRONG><a name="[c4]"></a>Delay_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cpu_lpc1000.o(.text), UNUSED)

<P><STRONG><a name="[88]"></a>SPI</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, cpu_lpc1000.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Flush_RX
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Flush_TX
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteRegBuf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadRegBuf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadReg
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Get_Status
</UL>

<P><STRONG><a name="[c5]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[3a]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 368 bytes, Stack size 8 bytes, system_lpc11xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, system_lpc11xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[41]"></a>fgetc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[c7]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[36]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[44]"></a>Led_Blink</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Ms
</UL>

<P><STRONG><a name="[46]"></a>NRF24L01_Receive</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NRF24L01_Receive &rArr; NRF24L01_Read_RX_Buf &rArr; NRF24L01_ReadRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_RX_Buf
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Get_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>NRF24L01_Send</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = NRF24L01_Send &rArr; NRF24L01_Write_TX_Buf &rArr; NRF24L01_WriteRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_TX_Buf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RF_TX
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Get_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>main</STRONG> (Thumb, 414 bytes, Stack size 160 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = main &rArr; NRF24L01_Init &rArr; NRF24L01_Set_RX_Pipe &rArr; NRF24L01_WriteRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Ms
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_IOConfig
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TX_Address
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RX_Pipe
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_Device_Mode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_move
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_ledStatus
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_begin
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Send
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e]"></a>I2C_IRQHandler</STRONG> (Thumb, 428 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IRQHandler &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>I2CStart</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>I2CStop</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[ca]"></a>I2CInit</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>I2CEngine</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>SSP0_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ssp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SSP1_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, ssp.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SSP_IOConfig</STRONG> (Thumb, 334 bytes, Stack size 0 bytes, ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>SSP_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ssp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSP_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>SSP_Send</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ssp.o(.text), UNUSED)

<P><STRONG><a name="[cd]"></a>SSP_Receive</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, ssp.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>reset_timer32</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timer32.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Ms
</UL>

<P><STRONG><a name="[5e]"></a>init_timer32</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timer32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer32
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Ms
</UL>

<P><STRONG><a name="[60]"></a>delay32Us</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, timer32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay32Us &rArr; init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer32
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readLoad
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_RWStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_lockRegister
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moving
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setPunch
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setCSlope
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setCMargin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setShutdownAlarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setLEDAlarm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setRDT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setSRL
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setMaxTorque
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setAngleLimit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setVoltageLimit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setTempLimit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readVoltage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readPosition
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readTemperature
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_torqueStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_action
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveSpeedRW
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveRW
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setEndless
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_turn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setBD
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setID
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_ping
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_reset
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_Device_Mode
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_RF_TX
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_move
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_ledStatus
</UL>

<P><STRONG><a name="[45]"></a>delay32Ms</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, timer32.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay32Ms &rArr; init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_timer32
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Led_Blink
</UL>

<P><STRONG><a name="[ce]"></a>enable_timer32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer32.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>disable_timer32</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer32.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer32PWM
</UL>

<P><STRONG><a name="[cf]"></a>read_timer32</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer32.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>init_timer32PWM</STRONG> (Thumb, 416 bytes, Stack size 12 bytes, timer32.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disable_timer32
</UL>

<P><STRONG><a name="[d0]"></a>setMatch_timer32PWM</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, timer32.o(.text), UNUSED)

<P><STRONG><a name="[14]"></a>UART_IRQHandler</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc11xx.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>ModemInit</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>UARTInit</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UARTInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_begin
</UL>

<P><STRONG><a name="[d2]"></a>UARTSend</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>UARTAvailable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readLoad
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_RWStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moving
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readVoltage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readPosition
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readTemperature
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
</UL>

<P><STRONG><a name="[65]"></a>UARTPeek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readLoad
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_RWStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moving
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readVoltage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readPosition
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readTemperature
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
</UL>

<P><STRONG><a name="[40]"></a>sendchar</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readLoad
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_RWStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_lockRegister
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moving
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setPunch
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setCSlope
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setCMargin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setShutdownAlarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setLEDAlarm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setRDT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setSRL
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setMaxTorque
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setAngleLimit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setVoltageLimit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setTempLimit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readVoltage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readPosition
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readTemperature
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_torqueStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_action
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveSpeedRW
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveRW
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setEndless
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_turn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setBD
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setID
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_ping
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_reset
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_move
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_ledStatus
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[42]"></a>getkey</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readLoad
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_RWStatus
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moving
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readVoltage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readPosition
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readTemperature
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[68]"></a>switchCom</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ax12.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readLoad
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readSpeed
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_RWStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_lockRegister
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moving
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setPunch
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setCSlope
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setCMargin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setShutdownAlarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setLEDAlarm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setRDT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setSRL
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setMaxTorque
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setAngleLimit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setVoltageLimit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setTempLimit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readVoltage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readPosition
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_readTemperature
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_torqueStatus
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_action
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveSpeedRW
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveRW
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setEndless
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_turn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setBD
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setID
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_ping
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_reset
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_move
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_ledStatus
</UL>

<P><STRONG><a name="[63]"></a>read_error</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, ax12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = read_error &rArr; delay32Us &rArr; init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAvailable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_lockRegister
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setPunch
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setCSlope
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setCMargin
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setShutdownAlarm
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setLEDAlarm
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setRDT
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setSRL
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setMaxTorque
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setAngleLimit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setVoltageLimit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setTempLimit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_torqueStatus
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveSpeedRW
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveRW
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setEndless
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_turn
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_moveSpeed
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setBD
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setID
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_ping
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_reset
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_move
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_ledStatus
</UL>

<P><STRONG><a name="[4e]"></a>AX12_begin</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ax12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AX12_begin &rArr; UARTInit
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTInit
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>AX12_reset</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[69]"></a>AX12_ping</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[6a]"></a>AX12_setID</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[6b]"></a>AX12_setBD</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[50]"></a>AX12_move</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ax12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AX12_move &rArr; read_error &rArr; delay32Us &rArr; init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>AX12_moveSpeed</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[6e]"></a>AX12_turn</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setEndless
</UL>

<P><STRONG><a name="[6f]"></a>AX12_setEndless</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_turn
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[70]"></a>AX12_moveRW</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[71]"></a>AX12_moveSpeedRW</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[72]"></a>AX12_action</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[73]"></a>AX12_torqueStatus</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[4f]"></a>AX12_ledStatus</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ax12.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = AX12_ledStatus &rArr; read_error &rArr; delay32Us &rArr; init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>AX12_readTemperature</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAvailable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[75]"></a>AX12_readPosition</STRONG> (Thumb, 310 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAvailable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[76]"></a>AX12_readVoltage</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAvailable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[77]"></a>AX12_setTempLimit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[78]"></a>AX12_setVoltageLimit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[79]"></a>AX12_setAngleLimit</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[7a]"></a>AX12_setMaxTorque</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[7b]"></a>AX12_setSRL</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[7c]"></a>AX12_setRDT</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[7d]"></a>AX12_setLEDAlarm</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[7e]"></a>AX12_setShutdownAlarm</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[7f]"></a>AX12_setCMargin</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[80]"></a>AX12_setCSlope</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[81]"></a>AX12_setPunch</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[82]"></a>AX12_moving</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAvailable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[83]"></a>AX12_lockRegister</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_error
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
</UL>

<P><STRONG><a name="[84]"></a>AX12_RWStatus</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAvailable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[85]"></a>AX12_readSpeed</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAvailable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[86]"></a>AX12_readLoad</STRONG> (Thumb, 286 bytes, Stack size 8 bytes, ax12.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCom
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTPeek
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTAvailable
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendchar
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getkey
</UL>

<P><STRONG><a name="[87]"></a>NRF24L01_ReadReg</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NRF24L01_ReadReg
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_Power
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Get_CD
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_DRint_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RX_Pipe
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_Device_Mode
</UL>

<P><STRONG><a name="[48]"></a>NRF24L01_WriteReg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NRF24L01_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Clear_Interrupts
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Disable_All_Pipes
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_Address_Width
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_ShockBurst
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_CH
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_Power
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_DRint_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RX_Pipe
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_Device_Mode
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Send
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Receive
</UL>

<P><STRONG><a name="[89]"></a>NRF24L01_ReadRegBuf</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NRF24L01_ReadRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Read_RX_Buf
</UL>

<P><STRONG><a name="[8a]"></a>NRF24L01_WriteRegBuf</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NRF24L01_WriteRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Write_TX_Buf
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TX_Address
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RX_Pipe
</UL>

<P><STRONG><a name="[8b]"></a>NRF24L01_DRint_Init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadReg
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
</UL>

<P><STRONG><a name="[47]"></a>NRF24L01_Get_Status</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NRF24L01_Get_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Send
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Receive
</UL>

<P><STRONG><a name="[8c]"></a>NRF24L01_Get_CD</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadReg
</UL>

<P><STRONG><a name="[8d]"></a>NRF24L01_Set_Power</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadReg
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
</UL>

<P><STRONG><a name="[8e]"></a>NRF24L01_Set_CH</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NRF24L01_Set_CH &rArr; NRF24L01_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
</UL>

<P><STRONG><a name="[8f]"></a>NRF24L01_Set_ShockBurst</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NRF24L01_Set_ShockBurst &rArr; NRF24L01_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
</UL>

<P><STRONG><a name="[90]"></a>NRF24L01_Set_Address_Width</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NRF24L01_Set_Address_Width &rArr; NRF24L01_WriteReg
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
</UL>

<P><STRONG><a name="[57]"></a>NRF24L01_Set_Device_Mode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NRF24L01_Set_Device_Mode &rArr; delay32Us &rArr; init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadReg
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>NRF24L01_Set_RX_Pipe</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = NRF24L01_Set_RX_Pipe &rArr; NRF24L01_WriteRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteRegBuf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadReg
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>NRF24L01_Disable_All_Pipes</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
</UL>

<P><STRONG><a name="[92]"></a>NRF24L01_Clear_Interrupts</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
</UL>

<P><STRONG><a name="[54]"></a>NRF24L01_Set_TX_Address</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01_Set_TX_Address &rArr; NRF24L01_WriteRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteRegBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>NRF24L01_Flush_TX</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI
</UL>

<P><STRONG><a name="[94]"></a>NRF24L01_Flush_RX</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, nrf24l01.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI
</UL>

<P><STRONG><a name="[53]"></a>NRF24L01_Init</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = NRF24L01_Init &rArr; NRF24L01_Set_RX_Pipe &rArr; NRF24L01_WriteRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_Address_Width
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_ShockBurst
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_CH
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteReg
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_TX_Address
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Set_RX_Pipe
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c]"></a>NRF24L01_RF_TX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = NRF24L01_RF_TX &rArr; delay32Us &rArr; init_timer32
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay32Us
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Send
</UL>

<P><STRONG><a name="[4b]"></a>NRF24L01_Write_TX_Buf</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01_Write_TX_Buf &rArr; NRF24L01_WriteRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_WriteRegBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Send
</UL>

<P><STRONG><a name="[49]"></a>NRF24L01_Read_RX_Buf</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, nrf24l01.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = NRF24L01_Read_RX_Buf &rArr; NRF24L01_ReadRegBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_ReadRegBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NRF24L01_Receive
</UL>

<P><STRONG><a name="[56]"></a>strcpy</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[d4]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AX12_setBD
</UL>

<P><STRONG><a name="[d5]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[95]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[da]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[97]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>

<P><STRONG><a name="[dc]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[3b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[dd]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[df]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[e0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[9a]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2d]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[2a]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[9b]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[32]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[9f]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3e]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, system_lpc11xx.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[21]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[39]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, cpu_lpc1000.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[5d]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ssp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSP_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[9d]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<HR></body></html>
